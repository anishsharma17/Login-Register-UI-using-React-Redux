{"ast":null,"code":"import { getAllUsersList } from '../services/GetUserList';\nimport { LoginVerify } from '../services/GetUserList';\nconst BASE_URL = 'http://localhost:4000/api/auth';\nconst USERS_URL = BASE_URL + '/create';\nconst PERSIST_URL = BASE_URL + '/verifyOtp';\nconst LOGIN_URL = BASE_URL + '/login';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; //Redux Action \n\n\n_c = SPECIFIC_USER_URL;\n\nconst setUserAction = userObj => ({\n  type: 'SET_USER',\n  payload: userObj\n});\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n}); //Redux Action \n\n\nconst setUserList = UserResponse => ({\n  type: 'SET_User_LIST_RESPONSE',\n  payload: UserResponse\n}); //\n//Fetch\n\n\nconst getAllUserAction = () => dispatch => {\n  getAllUsersList().then(function (response) {\n    dispatch(setUserList(response));\n    console.log(response);\n  });\n}; //Fetch\n// const newUserToDB = () =>dispatch =>{\n//     createUsers()\n//     .then(r => r.json ())\n//     .then(data =>{\n//         dispatch(setUserAction(data.user));\n//         console.log(data)\n//     });\n// };\n\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(userInstance => {\n    dispatch(setUserAction(userInstance));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  // newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  getAllUserAction\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SPECIFIC_USER_URL\");","map":{"version":3,"sources":["/home/anish/Documents/reduxDemo/rr-auth-frontend/src/redux/action.js"],"names":["getAllUsersList","LoginVerify","BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","SPECIFIC_USER_URL","id","setUserAction","userObj","type","payload","clearUserAction","setUserList","UserResponse","getAllUserAction","dispatch","then","response","console","log","deleteUserFromDB","userId","config","method","fetch","r","localStorage","clear","loginUserToDB","userCredentials","headers","body","JSON","stringify","json","data","user","setItem","token","persistUser","Authorization","userInstance","logoutUser"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,yBAA9B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,MAAMC,QAAQ,GAAG,gCAAjB;AACA,MAAMC,SAAS,GAAGD,QAAQ,GAAG,SAA7B;AACA,MAAME,WAAW,GAAGF,QAAQ,GAAG,YAA/B;AACA,MAAMG,SAAS,GAAGH,QAAQ,GAAG,QAA7B;;AACA,MAAMI,iBAAiB,GAAGC,EAAE,IAAIJ,SAAS,GAAG,GAAZ,GAAkBI,EAAlD,C,CAGA;;;KAHMD,iB;;AAIN,MAAME,aAAa,GAAIC,OAAD,KAAa;AAC/BC,EAAAA,IAAI,EAAE,UADyB;AAE/BC,EAAAA,OAAO,EAACF;AAFuB,CAAb,CAAtB;;AAIA,MAAMG,eAAe,GAAE,OAAK;AAC1BF,EAAAA,IAAI,EAAC;AADqB,CAAL,CAAvB,C,CAIA;;;AACA,MAAMG,WAAW,GAAIC,YAAD,KAAkB;AACpCJ,EAAAA,IAAI,EAAE,wBAD8B;AAEpCC,EAAAA,OAAO,EAACG;AAF4B,CAAlB,CAApB,C,CAQA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,MAAKC,QAAQ,IAAG;AAEvChB,EAAAA,eAAe,GAAGiB,IAAlB,CAAwB,UAASC,QAAT,EAAkB;AAExCF,IAAAA,QAAQ,CAACH,WAAW,CAACK,QAAD,CAAZ,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GAJD;AAMD,CARD,C,CAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,gBAAgB,GAAGC,MAAM,IAAIN,QAAQ,IAAI;AAC3C,QAAMO,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE;AADK,GAAf;AAGAC,EAAAA,KAAK,CAACnB,iBAAiB,CAACgB,MAAD,CAAlB,EAA4BC,MAA5B,CAAL,CAAyCN,IAAzC,CAA8CS,CAAC,IAAI;AACjDV,IAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AACAe,IAAAA,YAAY,CAACC,KAAb;AACD,GAHD;AAID,CARH;;AAUE,MAAMC,aAAa,GAAGC,eAAe,IAAId,QAAQ,IAAI;AACnD,QAAMO,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbO,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFI;AAKbC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,eAAf;AALO,GAAf;AAOAL,EAAAA,KAAK,CAACpB,SAAD,EAAYkB,MAAZ,CAAL,CACGN,IADH,CACQS,CAAC,IAAIA,CAAC,CAACS,IAAF,EADb,EAEGlB,IAFH,CAEQmB,IAAI,IAAI;AACZpB,IAAAA,QAAQ,CAACR,aAAa,CAAC4B,IAAI,CAACC,IAAN,CAAd,CAAR;AACAV,IAAAA,YAAY,CAACW,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AACD,GALH;AAMD,CAdD;;AAgBA,MAAMC,WAAW,GAAG,MAAMxB,QAAQ,IAAI;AACpC,QAAMO,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbO,IAAAA,OAAO,EAAE;AACPU,MAAAA,aAAa,EAAG,SAAD,GAAYd,YAAY,CAACY;AADjC;AAFI,GAAf;AAMAd,EAAAA,KAAK,CAACrB,WAAD,EAAcmB,MAAd,CAAL,CACGN,IADH,CACQS,CAAC,IAAIA,CAAC,CAACS,IAAF,EADb,EAEGlB,IAFH,CAEQyB,YAAY,IAAI;AACpB1B,IAAAA,QAAQ,CAACR,aAAa,CAACkC,YAAD,CAAd,CAAR;AACD,GAJH;AAKD,CAZD;;AAcA,MAAMC,UAAU,GAAG,MAAM3B,QAAQ,IAAI;AACnCA,EAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AACAe,EAAAA,YAAY,CAACC,KAAb;AACD,CAHD;;AAKA,eAAe;AACb;AACAP,EAAAA,gBAFa;AAGbQ,EAAAA,aAHa;AAIbW,EAAAA,WAJa;AAKbG,EAAAA,UALa;AAMb5B,EAAAA;AANa,CAAf","sourcesContent":["import {getAllUsersList} from '../services/GetUserList'\nimport { LoginVerify } from '../services/GetUserList';\n\nconst BASE_URL = 'http://localhost:4000/api/auth';\nconst USERS_URL = BASE_URL + '/create';\nconst PERSIST_URL = BASE_URL + '/verifyOtp';\nconst LOGIN_URL = BASE_URL + '/login';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n\n\n//Redux Action \nconst setUserAction = (userObj) =>({\n    type: 'SET_USER',\n    payload:userObj\n});\nconst clearUserAction= ()=>({\n  type:'CLEAR_USER'\n});\n\n//Redux Action \nconst setUserList = (UserResponse) =>({\n  type: 'SET_User_LIST_RESPONSE',\n  payload:UserResponse\n});\n\n\n\n\n//\n//Fetch\nconst getAllUserAction = () =>dispatch =>{\n\n  getAllUsersList().then( function(response){\n    \n    dispatch(setUserList(response));\n    console.log(response)\n  })\n  \n};\n\n\n//Fetch\n// const newUserToDB = () =>dispatch =>{\n    \n//     createUsers()\n//     .then(r => r.json ())\n//     .then(data =>{\n//         dispatch(setUserAction(data.user));\n//         console.log(data)\n//     });\n// };\nconst deleteUserFromDB = userId => dispatch => {\n    const config = {\n      method: 'DELETE'\n    };\n    fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n      dispatch(clearUserAction());\n      localStorage.clear();\n    });\n  };\n  \n  const loginUserToDB = userCredentials => dispatch => {\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userCredentials)\n    };\n    fetch(LOGIN_URL, config)\n      .then(r => r.json())\n      .then(data => {\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token', data.token);\n      });\n  };\n  \n  const persistUser = () => dispatch => {\n    const config = {\n      method: 'GET',\n      headers: {\n        Authorization: `bearer ` + localStorage.token\n      }\n    };\n    fetch(PERSIST_URL, config)\n      .then(r => r.json())\n      .then(userInstance => {\n        dispatch(setUserAction(userInstance));\n      });\n  };\n  \n  const logoutUser = () => dispatch => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  };\n  \n  export default {\n    // newUserToDB,\n    deleteUserFromDB,\n    loginUserToDB,\n    persistUser,\n    logoutUser,\n    getAllUserAction\n  };"]},"metadata":{},"sourceType":"module"}