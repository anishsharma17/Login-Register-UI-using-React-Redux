{"ast":null,"code":"var _jsxFileName = \"/home/anish/Documents/reduxDemo/rr-auth-frontend/src/Pages/login.js\",\n    _s = $RefreshSig$();\n\nimport './login.css';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, connect } from 'react-redux';\nimport userActions from '../redux/action';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '24ch'\n    }\n  }\n}));\n\nconst LoginPage = props => {\n  _s();\n\n  // initializing dispatch\n  const dispatch = useDispatch(); // Setting up local state using the useState hook\n\n  const [loginForm, setLoginForm] = useState({\n    username: '',\n    password: ''\n  });\n  let [isLanguageApiCalled, setIsLanguageApiCalled] = useState(0);\n  useEffect(() => {\n    if (isLanguageApiCalled == 0 && props.languageListResponse == undefined) {\n      dispatch(userActions.getAllLanguagesAction());\n      setIsLanguageApiCalled(1);\n    }\n  }, []);\n  useEffect(() => {\n    if (props.languageListResponse && props.languageListResponse.success) {}\n  }, [props.languageListResponse]); // controlled form functions\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(userActions.loginUserToDB(loginForm));\n    props.history.push('/');\n    console.log(loginForm);\n  };\n\n  const handleChange = e => setLoginForm({ ...loginForm,\n    [e.target.name]: e.target.value\n  }); // Destructuring keys from our local state to use in the form\n\n\n  const {\n    username,\n    password\n  } = loginForm;\n  const classes = useStyles(); // Component code\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      label: \"Username\",\n      variant: \"outlined\",\n      type: \"text\",\n      name: \"username\",\n      value: username,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"outlined-basic\",\n      label: \"Password\",\n      variant: \"outlined\",\n      type: \"password\",\n      name: \"password\",\n      value: password,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      href: \"#contained-buttons\",\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"c8JVxI7kdAONamwT5oooImSS1RM=\", false, function () {\n  return [useDispatch, useStyles];\n});\n\n_c = LoginPage;\n\nfunction mapStateToProps(state) {\n  return {\n    languageListResponse: state.languageListResponse\n  };\n}\n\nexport default connect(mapStateToProps)(LoginPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/home/anish/Documents/reduxDemo/rr-auth-frontend/src/Pages/login.js"],"names":["React","useState","useEffect","useDispatch","connect","userActions","TextField","Button","makeStyles","useStyles","theme","root","margin","spacing","width","LoginPage","props","dispatch","loginForm","setLoginForm","username","password","isLanguageApiCalled","setIsLanguageApiCalled","languageListResponse","undefined","getAllLanguagesAction","success","handleSubmit","e","preventDefault","loginUserToDB","history","push","console","log","handleChange","target","name","value","classes","mapStateToProps","state"],"mappings":"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","sourcesContent":["import './login.css';\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, connect } from 'react-redux';\nimport userActions from '../redux/action';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '24ch',\n    },\n  },\n}));\n\n\nconst LoginPage = props => {\n  // initializing dispatch\n  const dispatch = useDispatch();\n  // Setting up local state using the useState hook\n  const [loginForm, setLoginForm] = useState({\n    username: '',\n    password: ''\n  });\n\n\n  let [isLanguageApiCalled, setIsLanguageApiCalled] = useState(0);\n\n\n  useEffect(() => {\n    if(isLanguageApiCalled == 0 && props.languageListResponse == undefined){\n      dispatch(userActions.getAllLanguagesAction())\n      setIsLanguageApiCalled(1);\n    }\n  }, [])\n\n\n  useEffect(() => {\n    \n      if(props.languageListResponse && props.languageListResponse.success){\n        \n      }\n  }, [props.languageListResponse])\n\n\n  // controlled form functions\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(userActions.loginUserToDB(loginForm));\n    props.history.push('/');\n    console.log(loginForm);\n  };\n\n  const handleChange = e =>\n    setLoginForm({ ...loginForm, [e.target.name]: e.target.value });\n  // Destructuring keys from our local state to use in the form\n  const { username, password } = loginForm;\n  const classes = useStyles();\n\n  // Component code\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n      <h1>Login Page</h1>\n      <TextField id=\"outlined-basic\"\n        label=\"Username\" \n        variant=\"outlined\" \n        type=\"text\"\n        name=\"username\"\n        value={username}\n        onChange={handleChange}\n      /><br/>\n       <TextField id=\"outlined-basic\" \n        label=\"Password\" \n        variant=\"outlined\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        \n      /><br/>\n       <Button \n       variant=\"contained\"\n       color=\"primary\"\n       href=\"#contained-buttons\"\n       type=\"submit\">\n        Submit\n      </Button>\n     \n    </form>\n  );\n};\n\nfunction mapStateToProps(state) {\n  \n  return {\n    languageListResponse : state.languageListResponse\n  }\n}\n\nexport default connect(mapStateToProps)(LoginPage);"]},"metadata":{},"sourceType":"module"}