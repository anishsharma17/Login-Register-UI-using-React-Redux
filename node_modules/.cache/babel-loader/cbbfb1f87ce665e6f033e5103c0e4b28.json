{"ast":null,"code":"const BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/persist';\nconst LOGIN_URL = BASE_URL + '/login';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; //Redux Action \n\n\n_c = SPECIFIC_USER_URL;\n\nconst setUserAction = userObj => ({\n  type: 'SET_USER',\n  payload: userObj\n});\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n}); //\n//Fetch\n\n\nconst getAllLanguages = () => dispatch => {}; //Fetch\n\n\nconst newUserToDB = userObj => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'appliaction/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  fetch(USERS_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(userInstance => {\n    dispatch(setUserAction(userInstance));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SPECIFIC_USER_URL\");","map":{"version":3,"sources":["/home/anish/Documents/reduxDemo/rr-auth-frontend/src/redux/action.js"],"names":["BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","SPECIFIC_USER_URL","id","setUserAction","userObj","type","payload","clearUserAction","getAllLanguages","dispatch","newUserToDB","config","method","headers","body","JSON","stringify","fetch","then","r","json","data","user","localStorage","setItem","token","deleteUserFromDB","userId","clear","loginUserToDB","userCredentials","persistUser","Authorization","userInstance","logoutUser"],"mappings":"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","sourcesContent":["const BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\nconst PERSIST_URL = BASE_URL + '/persist';\nconst LOGIN_URL = BASE_URL + '/login';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n\n//Redux Action \nconst setUserAction = (userObj) =>({\n    type: 'SET_USER',\n    payload:userObj\n});\nconst clearUserAction= ()=>({\n  type:'CLEAR_USER'\n});\n\n\n\n\n//\n//Fetch\nconst getAllLanguages = () =>dispatch =>{\n    \n};\n\n//Fetch\nconst newUserToDB = (userObj) =>dispatch =>{\n    const config = {\n        method :'POST',\n        headers:{\n            'Content-Type': 'appliaction/json'\n        },\n        body: JSON.stringify(userObj)\n\n    };\n    fetch(USERS_URL,config)\n    .then(r => r.json ())\n    .then(data =>{\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token',data.token);\n    });\n};\nconst deleteUserFromDB = userId => dispatch => {\n    const config = {\n      method: 'DELETE'\n    };\n    fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n      dispatch(clearUserAction());\n      localStorage.clear();\n    });\n  };\n  \n  const loginUserToDB = userCredentials => dispatch => {\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userCredentials)\n    };\n    fetch(LOGIN_URL, config)\n      .then(r => r.json())\n      .then(data => {\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token', data.token);\n      });\n  };\n  \n  const persistUser = () => dispatch => {\n    const config = {\n      method: 'GET',\n      headers: {\n        Authorization: `bearer ` + localStorage.token\n      }\n    };\n    fetch(PERSIST_URL, config)\n      .then(r => r.json())\n      .then(userInstance => {\n        dispatch(setUserAction(userInstance));\n      });\n  };\n  \n  const logoutUser = () => dispatch => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  };\n  \n  export default {\n    newUserToDB,\n    deleteUserFromDB,\n    loginUserToDB,\n    persistUser,\n    logoutUser\n  };"]},"metadata":{},"sourceType":"module"}