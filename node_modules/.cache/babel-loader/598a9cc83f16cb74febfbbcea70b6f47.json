{"ast":null,"code":"import { getAllLanguages } from '../services/GetLsngusgesApi';\nimport { createUsers } from '../services/GetLsngusgesApi';\nconst BASE_URL = 'http://localhost:4000';\nconst USERS_URL = BASE_URL + '/create';\nconst PERSIST_URL = BASE_URL + '/verifyOtp';\nconst LOGIN_URL = BASE_URL + '/login';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; //Redux Action \n\n\n_c = SPECIFIC_USER_URL;\n\nconst setUserAction = userObj => ({\n  type: 'SET_USER',\n  payload: userObj\n});\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n}); //Redux Action \n\n\nconst setLanguageList = languageResponse => ({\n  type: 'SET_LANGUAGE_LIST_RESPONSE',\n  payload: languageResponse\n}); //\n//Fetch\n\n\nconst getAllLanguagesAction = () => dispatch => {\n  getAllLanguages().then(function (response) {\n    dispatch(setLanguageList(response));\n    console.log(response);\n  });\n}; //Fetch\n\n\nconst newUserToDB = () => dispatch => {\n  createUsers().then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(userInstance => {\n    dispatch(setUserAction(userInstance));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  getAllLanguagesAction\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SPECIFIC_USER_URL\");","map":{"version":3,"sources":["/home/anish/Documents/reduxDemo/rr-auth-frontend/src/redux/action.js"],"names":["getAllLanguages","createUsers","BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","SPECIFIC_USER_URL","id","setUserAction","userObj","type","payload","clearUserAction","setLanguageList","languageResponse","getAllLanguagesAction","dispatch","then","response","console","log","newUserToDB","r","json","data","user","localStorage","setItem","token","deleteUserFromDB","userId","config","method","fetch","clear","loginUserToDB","userCredentials","headers","body","JSON","stringify","persistUser","Authorization","userInstance","logoutUser"],"mappings":"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","sourcesContent":["import {getAllLanguages} from '../services/GetLsngusgesApi'\nimport { createUsers } from '../services/GetLsngusgesApi';\nconst BASE_URL = 'http://localhost:4000';\nconst USERS_URL = BASE_URL + '/create';\nconst PERSIST_URL = BASE_URL + '/verifyOtp';\nconst LOGIN_URL = BASE_URL + '/login';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n\n\n//Redux Action \nconst setUserAction = (userObj) =>({\n    type: 'SET_USER',\n    payload:userObj\n});\nconst clearUserAction= ()=>({\n  type:'CLEAR_USER'\n});\n\n//Redux Action \nconst setLanguageList = (languageResponse) =>({\n  type: 'SET_LANGUAGE_LIST_RESPONSE',\n  payload:languageResponse\n});\n\n\n\n\n//\n//Fetch\nconst getAllLanguagesAction = () =>dispatch =>{\n\n  getAllLanguages().then( function(response){\n    \n    dispatch(setLanguageList(response));\n    console.log(response)\n  })\n  \n};\n\n//Fetch\nconst newUserToDB = () =>dispatch =>{\n    \n    createUsers()\n    .then(r => r.json ())\n    .then(data =>{\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token',data.token);\n    });\n};\nconst deleteUserFromDB = userId => dispatch => {\n    const config = {\n      method: 'DELETE'\n    };\n    fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n      dispatch(clearUserAction());\n      localStorage.clear();\n    });\n  };\n  \n  const loginUserToDB = userCredentials => dispatch => {\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userCredentials)\n    };\n    fetch(LOGIN_URL, config)\n      .then(r => r.json())\n      .then(data => {\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token', data.token);\n      });\n  };\n  \n  const persistUser = () => dispatch => {\n    const config = {\n      method: 'GET',\n      headers: {\n        Authorization: `bearer ` + localStorage.token\n      }\n    };\n    fetch(PERSIST_URL, config)\n      .then(r => r.json())\n      .then(userInstance => {\n        dispatch(setUserAction(userInstance));\n      });\n  };\n  \n  const logoutUser = () => dispatch => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  };\n  \n  export default {\n    newUserToDB,\n    deleteUserFromDB,\n    loginUserToDB,\n    persistUser,\n    logoutUser,\n    getAllLanguagesAction\n  };"]},"metadata":{},"sourceType":"module"}