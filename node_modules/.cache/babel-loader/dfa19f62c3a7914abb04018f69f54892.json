{"ast":null,"code":"import { getAllUsersList } from '../services/GetUserList';\nimport { LoginVerify } from '../services/GetUserList';\nimport { createUsers } from '../services/GetUserList';\nconst BASE_URL = 'http://localhost:4000/api/auth';\nconst USERS_URL = BASE_URL + '/create';\nconst PERSIST_URL = BASE_URL + '/verifyOtp';\nconst LOGIN_URL = BASE_URL + '/login';\n\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id; //Redux Action \n\n\n_c = SPECIFIC_USER_URL;\n\nconst setUserAction = userObj => ({\n  type: 'SET_USER',\n  payload: userObj\n});\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n}); //Redux Action \n\n\nconst setUserList = UserResponse => ({\n  type: 'SET_User_LIST_RESPONSE',\n  payload: UserResponse\n}); //\n//Fetch\n\n\nconst getAllUserAction = () => dispatch => {\n  getAllUsersList().then(function (response) {\n    dispatch(setUserList(response));\n    console.log(response);\n  });\n}; //Login User\n\n\nconst loginUserToDB = data => dispatch => {\n  LoginVerify(data).then(function (data) {\n    debugger;\n    dispatch(setUserAction(data));\n    console.log(data); // localStorage.setItem('token', data.token);\n  });\n}; //Fetch\n\n\nconst newUserToDB = data => dispatch => {\n  createUsers(data).then(function (data) {\n    debugger;\n    dispatch(setUserAction(data));\n    console.log(data);\n  });\n}; // const deleteUserFromDB = userId => dispatch => {\n//     const config = {\n//       method: 'DELETE'\n//     };\n//     fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n//       dispatch(clearUserAction());\n//       localStorage.clear();\n//     });\n//   };\n\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(userInstance => {\n    dispatch(setUserAction(userInstance));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  // deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser,\n  getAllUserAction\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SPECIFIC_USER_URL\");","map":{"version":3,"sources":["/home/anish/Documents/reduxDemo/rr-auth-frontend/src/redux/action.js"],"names":["getAllUsersList","LoginVerify","createUsers","BASE_URL","USERS_URL","PERSIST_URL","LOGIN_URL","SPECIFIC_USER_URL","id","setUserAction","userObj","type","payload","clearUserAction","setUserList","UserResponse","getAllUserAction","dispatch","then","response","console","log","loginUserToDB","data","newUserToDB","persistUser","config","method","headers","Authorization","localStorage","token","fetch","r","json","userInstance","logoutUser","clear"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,yBAA9B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,MAAMC,QAAQ,GAAG,gCAAjB;AACA,MAAMC,SAAS,GAAGD,QAAQ,GAAG,SAA7B;AACA,MAAME,WAAW,GAAGF,QAAQ,GAAG,YAA/B;AACA,MAAMG,SAAS,GAAGH,QAAQ,GAAG,QAA7B;;AACA,MAAMI,iBAAiB,GAAGC,EAAE,IAAIJ,SAAS,GAAG,GAAZ,GAAkBI,EAAlD,C,CAGA;;;KAHMD,iB;;AAIN,MAAME,aAAa,GAAIC,OAAD,KAAa;AAC/BC,EAAAA,IAAI,EAAE,UADyB;AAE/BC,EAAAA,OAAO,EAACF;AAFuB,CAAb,CAAtB;;AAIA,MAAMG,eAAe,GAAE,OAAK;AAC1BF,EAAAA,IAAI,EAAC;AADqB,CAAL,CAAvB,C,CAIA;;;AACA,MAAMG,WAAW,GAAIC,YAAD,KAAkB;AACpCJ,EAAAA,IAAI,EAAE,wBAD8B;AAEpCC,EAAAA,OAAO,EAACG;AAF4B,CAAlB,CAApB,C,CAQA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,MAAKC,QAAQ,IAAG;AAEvCjB,EAAAA,eAAe,GAAGkB,IAAlB,CAAwB,UAASC,QAAT,EAAkB;AAExCF,IAAAA,QAAQ,CAACH,WAAW,CAACK,QAAD,CAAZ,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GAJD;AAMD,CARD,C,CAUA;;;AACA,MAAMG,aAAa,GAAIC,IAAD,IAAUN,QAAQ,IAAI;AAG1ChB,EAAAA,WAAW,CAACsB,IAAD,CAAX,CAAkBL,IAAlB,CAAwB,UAAUK,IAAV,EAAe;AACrC;AACEN,IAAAA,QAAQ,CAACR,aAAa,CAACc,IAAD,CAAd,CAAR;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAHmC,CAInC;AACD,GALH;AAMD,CATD,C,CAYA;;;AACA,MAAMC,WAAW,GAAID,IAAD,IAASN,QAAQ,IAAG;AAEtCf,EAAAA,WAAW,CAACqB,IAAD,CAAX,CAAkBL,IAAlB,CAAuB,UAAUK,IAAV,EAAe;AACpC;AACIN,IAAAA,QAAQ,CAACR,aAAa,CAACc,IAAD,CAAd,CAAR;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACH,GAJH;AAKD,CAPD,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIE,MAAME,WAAW,GAAG,MAAMR,QAAQ,IAAI;AACpC,QAAMS,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,SAAD,GAAYC,YAAY,CAACC;AADjC;AAFI,GAAf;AAMAC,EAAAA,KAAK,CAAC3B,WAAD,EAAcqB,MAAd,CAAL,CACGR,IADH,CACQe,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGhB,IAFH,CAEQiB,YAAY,IAAI;AACpBlB,IAAAA,QAAQ,CAACR,aAAa,CAAC0B,YAAD,CAAd,CAAR;AACD,GAJH;AAKD,CAZD;;AAcA,MAAMC,UAAU,GAAG,MAAMnB,QAAQ,IAAI;AACnCA,EAAAA,QAAQ,CAACJ,eAAe,EAAhB,CAAR;AACAiB,EAAAA,YAAY,CAACO,KAAb;AACD,CAHD;;AAKA,eAAe;AACbb,EAAAA,WADa;AAEb;AACAF,EAAAA,aAHa;AAIbG,EAAAA,WAJa;AAKbW,EAAAA,UALa;AAMbpB,EAAAA;AANa,CAAf","sourcesContent":["import {getAllUsersList} from '../services/GetUserList'\nimport { LoginVerify } from '../services/GetUserList';\nimport { createUsers } from '../services/GetUserList';\n\nconst BASE_URL = 'http://localhost:4000/api/auth';\nconst USERS_URL = BASE_URL + '/create';\nconst PERSIST_URL = BASE_URL + '/verifyOtp';\nconst LOGIN_URL = BASE_URL + '/login';\nconst SPECIFIC_USER_URL = id => USERS_URL + '/' + id;\n\n\n//Redux Action \nconst setUserAction = (userObj) =>({\n    type: 'SET_USER',\n    payload:userObj\n});\nconst clearUserAction= ()=>({\n  type:'CLEAR_USER'\n});\n\n//Redux Action \nconst setUserList = (UserResponse) =>({\n  type: 'SET_User_LIST_RESPONSE',\n  payload:UserResponse\n});\n\n\n\n\n//\n//Fetch\nconst getAllUserAction = () =>dispatch =>{\n\n  getAllUsersList().then( function(response){\n    \n    dispatch(setUserList(response));\n    console.log(response)\n  })\n  \n};\n\n//Login User\nconst loginUserToDB = (data) => dispatch => {\n  \n  \n  LoginVerify(data).then( function (data){\n    debugger\n      dispatch(setUserAction(data));\n      console.log(data);\n      // localStorage.setItem('token', data.token);\n    })\n};\n\n\n//Fetch\nconst newUserToDB = (data) =>dispatch =>{\n    \n  createUsers(data).then(function (data){\n    debugger\n        dispatch(setUserAction(data));\n        console.log(data)\n    });\n};\n// const deleteUserFromDB = userId => dispatch => {\n//     const config = {\n//       method: 'DELETE'\n//     };\n//     fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n//       dispatch(clearUserAction());\n//       localStorage.clear();\n//     });\n//   };\n  \n  \n  \n  const persistUser = () => dispatch => {\n    const config = {\n      method: 'GET',\n      headers: {\n        Authorization: `bearer ` + localStorage.token\n      }\n    };\n    fetch(PERSIST_URL, config)\n      .then(r => r.json())\n      .then(userInstance => {\n        dispatch(setUserAction(userInstance));\n      });\n  };\n  \n  const logoutUser = () => dispatch => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  };\n  \n  export default {\n    newUserToDB,\n    // deleteUserFromDB,\n    loginUserToDB,\n    persistUser,\n    logoutUser,\n    getAllUserAction\n  };"]},"metadata":{},"sourceType":"module"}