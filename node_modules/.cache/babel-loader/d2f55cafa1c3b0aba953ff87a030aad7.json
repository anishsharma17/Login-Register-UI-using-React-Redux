{"ast":null,"code":"const BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users'; //Redux Action \n\nconst setUserAction = userObj => ({\n  type: 'SET_USER',\n  payload: userObj\n});\n\nconst clearUserAction = () => ({\n  type: 'CLEAR_USER'\n}); //Fetch\n\n\nconst newUserToDB = userObj => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'appliaction/json'\n    },\n    body: JSON.stringify(userObj)\n  };\n  fetch(USERS_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst deleteUserFromDB = userId => dispatch => {\n  const config = {\n    method: 'DELETE'\n  };\n  fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  });\n};\n\nconst loginUserToDB = userCredentials => dispatch => {\n  const config = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userCredentials)\n  };\n  fetch(LOGIN_URL, config).then(r => r.json()).then(data => {\n    dispatch(setUserAction(data.user));\n    localStorage.setItem('token', data.token);\n  });\n};\n\nconst persistUser = () => dispatch => {\n  const config = {\n    method: 'GET',\n    headers: {\n      Authorization: `bearer ` + localStorage.token\n    }\n  };\n  fetch(PERSIST_URL, config).then(r => r.json()).then(userInstance => {\n    dispatch(setUserAction(userInstance));\n  });\n};\n\nconst logoutUser = () => dispatch => {\n  dispatch(clearUserAction());\n  localStorage.clear();\n};\n\nexport default {\n  newUserToDB,\n  deleteUserFromDB,\n  loginUserToDB,\n  persistUser,\n  logoutUser\n};","map":{"version":3,"sources":["/home/anish/Documents/reduxDemo/rr-auth-frontend/src/redux/action.js"],"names":["BASE_URL","USERS_URL","setUserAction","userObj","type","payload","clearUserAction","newUserToDB","dispatch","config","method","headers","body","JSON","stringify","fetch","then","r","json","data","user","localStorage","setItem","token","deleteUserFromDB","userId","SPECIFIC_USER_URL","clear","loginUserToDB","userCredentials","LOGIN_URL","persistUser","Authorization","PERSIST_URL","userInstance","logoutUser"],"mappings":"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","sourcesContent":["const BASE_URL = 'http://localhost:3000';\nconst USERS_URL = BASE_URL + '/users';\n\n//Redux Action \nconst setUserAction = userObj =>({\n    type: 'SET_USER',\n    payload:userObj\n});\nconst clearUserAction= ()=>({\n  type:'CLEAR_USER'\n});\n\n//Fetch\nconst newUserToDB = userObj =>dispatch =>{\n    const config = {\n        method :'POST',\n        headers:{\n            'Content-Type': 'appliaction/json'\n        },\n        body: JSON.stringify(userObj)\n\n    };\n    fetch(USERS_URL,config)\n    .then(r => r.json ())\n    .then(data =>{\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token',data.token);\n    });\n};\nconst deleteUserFromDB = userId => dispatch => {\n    const config = {\n      method: 'DELETE'\n    };\n    fetch(SPECIFIC_USER_URL(userId), config).then(r => {\n      dispatch(clearUserAction());\n      localStorage.clear();\n    });\n  };\n  \n  const loginUserToDB = userCredentials => dispatch => {\n    const config = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userCredentials)\n    };\n    fetch(LOGIN_URL, config)\n      .then(r => r.json())\n      .then(data => {\n        dispatch(setUserAction(data.user));\n        localStorage.setItem('token', data.token);\n      });\n  };\n  \n  const persistUser = () => dispatch => {\n    const config = {\n      method: 'GET',\n      headers: {\n        Authorization: `bearer ` + localStorage.token\n      }\n    };\n    fetch(PERSIST_URL, config)\n      .then(r => r.json())\n      .then(userInstance => {\n        dispatch(setUserAction(userInstance));\n      });\n  };\n  \n  const logoutUser = () => dispatch => {\n    dispatch(clearUserAction());\n    localStorage.clear();\n  };\n  \n  export default {\n    newUserToDB,\n    deleteUserFromDB,\n    loginUserToDB,\n    persistUser,\n    logoutUser\n  };"]},"metadata":{},"sourceType":"module"}